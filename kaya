#! /bin/bash

# This file is part of Kaya.
#
# Kaya is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Kaya is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Kaya.  If not, see <https://www.gnu.org/licenses/>.
#
# Copyright 2021 Andrew Engelbrecht
#

if ! test "$BASH_VERSION"; then echo "error: shell is not bash" >&2; exit 1; fi
shopt -s inherit_errexit 2>/dev/null ||: # ignore fail in bash < 4.4
set -eE -o pipefail
trap 'echo "$0:$LINENO:error: \"$BASH_COMMAND\" exit status: $?, PIPESTATUS: ${PIPESTATUS[*]}" >&2' ERR


# defaults

function kaya_usage {
    cat << EOF 1>&2

kaya usage:
kaya [-c /etc/kaya.conf] [-u root] www1.example.com backup -- <restic flags>

EOF
    exit $1
}

function set_defaults() {
    global_conf="/etc/kaya.conf"
    remote_user="root"
}

function get_params() {
    local -a positional
    local key
    while (( $# )); do
        key="$1"

        case $key in
            -c|--conf)
                global_conf="$2"
                shift 2
                ;;
            -u|--user)
                remote_user="$2"
                shift 2
                ;;
            --)
                shift
                backup_options="$*"
                break
                ;;
            -*)
                echo "kaya: error: unrecognized argument: $key" >&2
                kaya_usage 1
                ;;
            *)
                positional+=("$key")
                shift
                ;;
        esac
    done

    set -- "${positional[@]}"

    hostname="$1"
    action="$2"

    if [[ -z ${hostname} ]]; then
        echo "kaya: error: missing hostname argument" >&2
        kaya_usage 1
    fi

    case $action in
        backup)
        # currently the only option is to backup
        ;;
        *)
            echo "kaya: error: invalid action argument: $action" >&2
            kaya_usage 1
            ;;
    esac
}

## create restic backup repo, store the new password in plaintext, and hash it in .htpasswd
function create_backup_dir() {
    echo "kaya: Creating backup directory..."

    mkdir -p "${backup_dir}"; chmod 700 "${backup_dir}"
    touch "${password_file}"; chmod 400 "${password_file}"; pwgen 30 1 > "${password_file}"

    RESTIC_PASSWORD="$(cat "${password_file}")" restic -r "${backup_dir}" init > /dev/null

    touch "${htpasswd_file}"; chmod 600 "${htpasswd_file}"
    flock -w 10 "${htpasswd_file}.flock" -c "htpasswd -i -B '${htpasswd_file}' '${hostname}'" < "${password_file}" \
        |& { grep -E -v "(Adding|Updating) password for user" >&2 ||:; }

    echo "kaya: Waiting 15s for rest-server file reload (first snapshot only)..."
    sleep 15
}

function start_backup() {
    echo "kaya: Starting backup of ${hostname}"
    echo

    # make the backup over a forwarded port
    cat << EOF | ssh -R "${remote_port}:localhost:${local_port}" "${remote_user}@${hostname}" kaya-client
$remote_port
$hostname
$(cat "${password_file}")
$backup_options
EOF

}

function main() {
    set_defaults
    get_params "$@"

    # shellcheck source=/etc/kaya.conf
    source "${global_conf}"

    backup_dir="${backuproot}/${hostname}"
    password_file="${backup_dir}/repo-password-keep"
    htpasswd_file="${backuproot}/.htpasswd"

    if [[ ! -d $backup_dir ]]; then
        create_backup_dir
    fi

    if [[ $action == backup ]]; then
        start_backup
    fi
}

main "$@"

